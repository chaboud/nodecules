"""Add immutable contexts table

Revision ID: e6b1e9e7359f
Revises: 1ac44db2a12e
Create Date: 2025-08-31 19:21:55.687830

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e6b1e9e7359f'
down_revision = '1ac44db2a12e'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('data_objects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('object_type', sa.String(length=50), nullable=False),
    sa.Column('content_hash', sa.String(length=64), nullable=False),
    sa.Column('storage_location', sa.String(length=500), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('content_hash')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('annotations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('data_object_id', sa.UUID(), nullable=False),
    sa.Column('annotation_type', sa.String(length=50), nullable=False),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.Column('confidence', sa.Integer(), nullable=True),
    sa.Column('annotator_id', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['data_object_id'], ['data_objects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index(op.f('ix_smart_contexts_context_id'), table_name='smart_contexts')
    op.drop_table('smart_contexts')
    op.drop_index(op.f('ix_instance_executions_execution_id'), table_name='instance_executions')
    op.drop_table('instance_executions')
    op.drop_index(op.f('ix_graph_instances_instance_id'), table_name='graph_instances')
    op.drop_table('graph_instances')
    op.alter_column('executions', 'graph_id',
               existing_type=sa.UUID(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('executions', 'graph_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_table('graph_instances',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('instance_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('graph_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('instance_state', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('last_outputs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('run_count', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_executed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='graph_instances_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_graph_instances_instance_id'), 'graph_instances', ['instance_id'], unique=True)
    op.create_table('instance_executions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('instance_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('execution_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('inputs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('outputs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('node_status', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('errors', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['instance_id'], ['graph_instances.id'], name=op.f('instance_executions_instance_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('instance_executions_pkey'))
    )
    op.create_index(op.f('ix_instance_executions_execution_id'), 'instance_executions', ['execution_id'], unique=False)
    op.create_table('smart_contexts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('context_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('provider_context_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('messages', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('context_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('turn_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('smart_contexts_pkey'))
    )
    op.create_index(op.f('ix_smart_contexts_context_id'), 'smart_contexts', ['context_id'], unique=True)
    op.drop_table('annotations')
    op.drop_table('users')
    op.drop_table('data_objects')
    # ### end Alembic commands ###